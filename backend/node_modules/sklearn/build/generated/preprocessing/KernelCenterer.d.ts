import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  Center an arbitrary kernel matrix \\(K\\).

  Let define a kernel \\(K\\) such that:

  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.KernelCenterer.html)
 */
export declare class KernelCenterer {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: {
        /**
          Average of each column of kernel matrix.
         */
        K_fit_rows_?: NDArray;
        /**
          Average of kernel matrix.
         */
        K_fit_all_?: number;
        /**
          Number of features seen during [fit](../../glossary.html#term-fit).
         */
        n_features_in_?: number;
        /**
          Names of features seen during [fit](../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
         */
        feature_names_in_?: NDArray;
    });
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Fit KernelCenterer.
     */
    fit(opts: {
        /**
          Kernel matrix.
         */
        K?: NDArray[];
        /**
          Ignored.
         */
        y?: any;
    }): Promise<any>;
    /**
      Fit to data, then transform it.
  
      Fits transformer to `X` and `y` with optional parameters `fit\_params` and returns a transformed version of `X`.
     */
    fit_transform(opts: {
        /**
          Input samples.
         */
        X?: ArrayLike[];
        /**
          Target values (`undefined` for unsupervised transformations).
         */
        y?: ArrayLike;
        /**
          Additional fit parameters.
         */
        fit_params?: any;
    }): Promise<any[]>;
    /**
      Get output feature names for transformation.
  
      The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: `\["class\_name0", "class\_name1", "class\_name2"\]`.
     */
    get_feature_names_out(opts: {
        /**
          Only used to validate feature names with the names seen in `fit`.
         */
        input_features?: any;
    }): Promise<any>;
    /**
      Get metadata routing of this object.
  
      Please check [User Guide](../../metadata_routing.html#metadata-routing) on how the routing mechanism works.
     */
    get_metadata_routing(opts: {
        /**
          A [`MetadataRequest`](sklearn.utils.metadata_routing.MetadataRequest.html#sklearn.utils.metadata_routing.MetadataRequest "sklearn.utils.metadata_routing.MetadataRequest") encapsulating routing information.
         */
        routing?: any;
    }): Promise<any>;
    /**
      Request metadata passed to the `fit` method.
  
      Note that this method is only relevant if `enable\_metadata\_routing=True` (see [`sklearn.set\_config`](sklearn.set_config.html#sklearn.set_config "sklearn.set_config")). Please see [User Guide](../../metadata_routing.html#metadata-routing) on how the routing mechanism works.
  
      The options for each parameter are:
     */
    set_fit_request(opts: {
        /**
          Metadata routing for `K` parameter in `fit`.
         */
        K?: string | boolean;
    }): Promise<any>;
    /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
    set_output(opts: {
        /**
          Configure output of `transform` and `fit\_transform`.
         */
        transform?: 'default' | 'pandas';
    }): Promise<any>;
    /**
      Request metadata passed to the `transform` method.
  
      Note that this method is only relevant if `enable\_metadata\_routing=True` (see [`sklearn.set\_config`](sklearn.set_config.html#sklearn.set_config "sklearn.set_config")). Please see [User Guide](../../metadata_routing.html#metadata-routing) on how the routing mechanism works.
  
      The options for each parameter are:
     */
    set_transform_request(opts: {
        /**
          Metadata routing for `K` parameter in `transform`.
         */
        K?: string | boolean;
        /**
          Metadata routing for `copy` parameter in `transform`.
         */
        copy?: string | boolean;
    }): Promise<any>;
    /**
      Center kernel matrix.
     */
    transform(opts: {
        /**
          Kernel matrix.
         */
        K?: NDArray[];
        /**
          Set to `false` to perform inplace computation.
    
          @defaultValue `true`
         */
        copy?: boolean;
    }): Promise<NDArray[]>;
}
//# sourceMappingURL=KernelCenterer.d.ts.map