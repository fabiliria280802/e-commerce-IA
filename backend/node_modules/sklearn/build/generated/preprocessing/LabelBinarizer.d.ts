import { PythonBridge, NDArray, SparseMatrix } from '@/sklearn/types';
/**
  Binarize labels in a one-vs-all fashion.

  Several regression and binary classification algorithms are available in scikit-learn. A simple way to extend these algorithms to the multi-class classification case is to use the so-called one-vs-all scheme.

  At learning time, this simply consists in learning one regressor or binary classifier per class. In doing so, one needs to convert multi-class labels to binary labels (belong or does not belong to the class). `LabelBinarizer` makes this process easy with the transform method.

  At prediction time, one assigns the class for which the corresponding model gave the greatest confidence. `LabelBinarizer` makes this easy with the [`inverse\_transform`](#sklearn.preprocessing.LabelBinarizer.inverse_transform "sklearn.preprocessing.LabelBinarizer.inverse_transform") method.

  Read more in the [User Guide](../preprocessing_targets.html#preprocessing-targets).

  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.LabelBinarizer.html)
 */
export declare class LabelBinarizer {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: {
        /**
          Value with which negative labels must be encoded.
    
          @defaultValue `0`
         */
        neg_label?: number;
        /**
          Value with which positive labels must be encoded.
    
          @defaultValue `1`
         */
        pos_label?: number;
        /**
          True if the returned array from transform is desired to be in sparse CSR format.
    
          @defaultValue `false`
         */
        sparse_output?: boolean;
    });
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Fit label binarizer.
     */
    fit(opts: {
        /**
          Target values. The 2-d matrix should only contain 0 and 1, represents multilabel classification.
         */
        y?: NDArray;
    }): Promise<any>;
    /**
      Fit label binarizer/transform multi-class labels to binary labels.
  
      The output of transform is sometimes referred to as the 1-of-K coding scheme.
     */
    fit_transform(opts: {
        /**
          Target values. The 2-d matrix should only contain 0 and 1, represents multilabel classification. Sparse matrix can be CSR, CSC, COO, DOK, or LIL.
         */
        y?: NDArray | SparseMatrix;
    }): Promise<NDArray | SparseMatrix[]>;
    /**
      Get metadata routing of this object.
  
      Please check [User Guide](../../metadata_routing.html#metadata-routing) on how the routing mechanism works.
     */
    get_metadata_routing(opts: {
        /**
          A [`MetadataRequest`](sklearn.utils.metadata_routing.MetadataRequest.html#sklearn.utils.metadata_routing.MetadataRequest "sklearn.utils.metadata_routing.MetadataRequest") encapsulating routing information.
         */
        routing?: any;
    }): Promise<any>;
    /**
      Transform binary labels back to multi-class labels.
     */
    inverse_transform(opts: {
        /**
          Target values. All sparse matrices are converted to CSR before inverse transformation.
         */
        Y?: NDArray | SparseMatrix[];
        /**
          Threshold used in the binary and multi-label cases.
    
          Use 0 when `Y` contains the output of [decision\_function](../../glossary.html#term-decision_function) (classifier). Use 0.5 when `Y` contains the output of [predict\_proba](../../glossary.html#term-predict_proba).
    
          If `undefined`, the threshold is assumed to be half way between neg\_label and pos\_label.
         */
        threshold?: number;
    }): Promise<NDArray | SparseMatrix>;
    /**
      Request metadata passed to the `inverse\_transform` method.
  
      Note that this method is only relevant if `enable\_metadata\_routing=True` (see [`sklearn.set\_config`](sklearn.set_config.html#sklearn.set_config "sklearn.set_config")). Please see [User Guide](../../metadata_routing.html#metadata-routing) on how the routing mechanism works.
  
      The options for each parameter are:
     */
    set_inverse_transform_request(opts: {
        /**
          Metadata routing for `threshold` parameter in `inverse\_transform`.
         */
        threshold?: string | boolean;
    }): Promise<any>;
    /**
      Set output container.
  
      See [Introducing the set\_output API](../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.
     */
    set_output(opts: {
        /**
          Configure output of `transform` and `fit\_transform`.
         */
        transform?: 'default' | 'pandas';
    }): Promise<any>;
    /**
      Transform multi-class labels to binary labels.
  
      The output of transform is sometimes referred to by some authors as the 1-of-K coding scheme.
     */
    transform(opts: {
        /**
          Target values. The 2-d matrix should only contain 0 and 1, represents multilabel classification. Sparse matrix can be CSR, CSC, COO, DOK, or LIL.
         */
        y?: SparseMatrix;
    }): Promise<NDArray | SparseMatrix[]>;
    /**
      Holds the label for each class.
     */
    get classes_(): Promise<NDArray>;
    /**
      Represents the type of the target data as evaluated by [`type\_of\_target`](sklearn.utils.multiclass.type_of_target.html#sklearn.utils.multiclass.type_of_target "sklearn.utils.multiclass.type_of_target"). Possible type are ‘continuous’, ‘continuous-multioutput’, ‘binary’, ‘multiclass’, ‘multiclass-multioutput’, ‘multilabel-indicator’, and ‘unknown’.
     */
    get y_type_(): Promise<string>;
    /**
      `false` otherwise.
     */
    get sparse_input_(): Promise<boolean>;
}
//# sourceMappingURL=LabelBinarizer.d.ts.map