import { PythonBridge, NDArray, ArrayLike } from '@/sklearn/types';
/**
  Validation Curve visualization.

  It is recommended to use [`from\_estimator`](#sklearn.model_selection.ValidationCurveDisplay.from_estimator "sklearn.model_selection.ValidationCurveDisplay.from_estimator") to create a [`ValidationCurveDisplay`](#sklearn.model_selection.ValidationCurveDisplay "sklearn.model_selection.ValidationCurveDisplay") instance. All parameters are stored as attributes.

  Read more in the [User Guide](../../visualizations.html#visualizations) for general information about the visualization API and [detailed documentation](../learning_curve.html#validation-curve) regarding the validation curve visualization.

  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.ValidationCurveDisplay.html)
 */
export declare class ValidationCurveDisplay {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: {
        /**
          Name of the parameter that has been varied.
         */
        param_name?: string;
        /**
          The values of the parameter that have been evaluated.
         */
        param_range?: ArrayLike;
        /**
          Scores on training sets.
         */
        train_scores?: NDArray[];
        /**
          Scores on test set.
         */
        test_scores?: NDArray[];
        /**
          The name of the score used in `validation\_curve`. It will override the name inferred from the `scoring` parameter. If `score` is `undefined`, we use `"Score"` if `negate\_score` is `false` and `"Negative score"` otherwise. If `scoring` is a string or a callable, we infer the name. We replace `\_` by spaces and capitalize the first letter. We remove `neg\_` and replace it by `"Negative"` if `negate\_score` is `false` or just remove it otherwise.
         */
        score_name?: string;
    });
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Create a validation curve display from an estimator.
  
      Read more in the [User Guide](../../visualizations.html#visualizations) for general information about the visualization API and [detailed documentation](../learning_curve.html#validation-curve) regarding the validation curve visualization.
     */
    from_estimator(opts: {
        /**
          An object of that type which is cloned for each validation.
         */
        estimator?: any;
        /**
          Training data, where `n\_samples` is the number of samples and `n\_features` is the number of features.
         */
        X?: ArrayLike[];
        /**
          Target relative to X for classification or regression; `undefined` for unsupervised learning.
         */
        y?: ArrayLike;
        /**
          Name of the parameter that will be varied.
         */
        param_name?: string;
        /**
          The values of the parameter that will be evaluated.
         */
        param_range?: ArrayLike;
        /**
          Group labels for the samples used while splitting the dataset into train/test set. Only used in conjunction with a “Group” [cv](../../glossary.html#term-cv) instance (e.g., [`GroupKFold`](sklearn.model_selection.GroupKFold.html#sklearn.model_selection.GroupKFold "sklearn.model_selection.GroupKFold")).
         */
        groups?: ArrayLike;
        /**
          Determines the cross-validation splitting strategy. Possible inputs for cv are:
         */
        cv?: number;
        /**
          A string (see [The scoring parameter: defining model evaluation rules](../model_evaluation.html#scoring-parameter)) or a scorer callable object / function with signature `scorer(estimator, X, y)` (see [Defining your scoring strategy from metric functions](../model_evaluation.html#scoring)).
         */
        scoring?: string;
        /**
          Number of jobs to run in parallel. Training the estimator and computing the score are parallelized over the different training and test sets. `undefined` means 1 unless in a [`joblib.parallel\_backend`](https://joblib.readthedocs.io/en/latest/generated/joblib.parallel_backend.html#joblib.parallel_backend "(in joblib v1.4.dev0)") context. `\-1` means using all processors. See [Glossary](../../glossary.html#term-n_jobs) for more details.
         */
        n_jobs?: number;
        /**
          Number of predispatched jobs for parallel execution (default is all). The option can reduce the allocated memory. The str can be an expression like ‘2\*n\_jobs’.
    
          @defaultValue `'all'`
         */
        pre_dispatch?: number | string;
        /**
          Controls the verbosity: the higher, the more messages.
    
          @defaultValue `0`
         */
        verbose?: number;
        /**
          Value to assign to the score if an error occurs in estimator fitting. If set to ‘raise’, the error is raised. If a numeric value is given, FitFailedWarning is raised.
         */
        error_score?: 'raise';
        /**
          Parameters to pass to the fit method of the estimator.
         */
        fit_params?: any;
        /**
          Axes object to plot on. If `undefined`, a new figure and axes is created.
         */
        ax?: any;
        /**
          Whether or not to negate the scores obtained through [`validation\_curve`](sklearn.model_selection.validation_curve.html#sklearn.model_selection.validation_curve "sklearn.model_selection.validation_curve"). This is particularly useful when using the error denoted by `neg\_\*` in `scikit-learn`.
    
          @defaultValue `false`
         */
        negate_score?: boolean;
        /**
          The name of the score used to decorate the y-axis of the plot. It will override the name inferred from the `scoring` parameter. If `score` is `undefined`, we use `"Score"` if `negate\_score` is `false` and `"Negative score"` otherwise. If `scoring` is a string or a callable, we infer the name. We replace `\_` by spaces and capitalize the first letter. We remove `neg\_` and replace it by `"Negative"` if `negate\_score` is `false` or just remove it otherwise.
         */
        score_name?: string;
        /**
          The type of score to plot. Can be one of `"test"`, `"train"`, or `"both"`.
    
          @defaultValue `'both'`
         */
        score_type?: 'test' | 'train' | 'both';
        /**
          The style used to display the score standard deviation around the mean score. If `undefined`, no representation of the standard deviation is displayed.
    
          @defaultValue `'fill_between'`
         */
        std_display_style?: 'errorbar' | 'fill_between';
        /**
          Additional keyword arguments passed to the `plt.plot` used to draw the mean score.
         */
        line_kw?: any;
        /**
          Additional keyword arguments passed to the `plt.fill\_between` used to draw the score standard deviation.
         */
        fill_between_kw?: any;
        /**
          Additional keyword arguments passed to the `plt.errorbar` used to draw mean score and standard deviation score.
         */
        errorbar_kw?: any;
    }): Promise<any>;
    /**
      Plot visualization.
     */
    plot(opts: {
        /**
          Axes object to plot on. If `undefined`, a new figure and axes is created.
         */
        ax?: any;
        /**
          Whether or not to negate the scores obtained through [`validation\_curve`](sklearn.model_selection.validation_curve.html#sklearn.model_selection.validation_curve "sklearn.model_selection.validation_curve"). This is particularly useful when using the error denoted by `neg\_\*` in `scikit-learn`.
    
          @defaultValue `false`
         */
        negate_score?: boolean;
        /**
          The name of the score used to decorate the y-axis of the plot. It will override the name inferred from the `scoring` parameter. If `score` is `undefined`, we use `"Score"` if `negate\_score` is `false` and `"Negative score"` otherwise. If `scoring` is a string or a callable, we infer the name. We replace `\_` by spaces and capitalize the first letter. We remove `neg\_` and replace it by `"Negative"` if `negate\_score` is `false` or just remove it otherwise.
         */
        score_name?: string;
        /**
          The type of score to plot. Can be one of `"test"`, `"train"`, or `"both"`.
    
          @defaultValue `'both'`
         */
        score_type?: 'test' | 'train' | 'both';
        /**
          The style used to display the score standard deviation around the mean score. If `undefined`, no standard deviation representation is displayed.
    
          @defaultValue `'fill_between'`
         */
        std_display_style?: 'errorbar' | 'fill_between';
        /**
          Additional keyword arguments passed to the `plt.plot` used to draw the mean score.
         */
        line_kw?: any;
        /**
          Additional keyword arguments passed to the `plt.fill\_between` used to draw the score standard deviation.
         */
        fill_between_kw?: any;
        /**
          Additional keyword arguments passed to the `plt.errorbar` used to draw mean score and standard deviation score.
         */
        errorbar_kw?: any;
    }): Promise<any>;
    /**
      Axes with the validation curve.
     */
    get ax_(): Promise<any>;
    /**
      Figure containing the validation curve.
     */
    get figure_(): Promise<any>;
    /**
      When the `std\_display\_style` is `"errorbar"`, this is a list of `matplotlib.container.ErrorbarContainer` objects. If another style is used, `errorbar\_` is `undefined`.
     */
    get errorbar_(): Promise<any>;
    /**
      When the `std\_display\_style` is `"fill\_between"`, this is a list of `matplotlib.lines.Line2D` objects corresponding to the mean train and test scores. If another style is used, `line\_` is `undefined`.
     */
    get lines_(): Promise<any>;
    /**
      When the `std\_display\_style` is `"fill\_between"`, this is a list of `matplotlib.collections.PolyCollection` objects. If another style is used, `fill\_between\_` is `undefined`.
     */
    get fill_between_(): Promise<any>;
}
//# sourceMappingURL=ValidationCurveDisplay.d.ts.map