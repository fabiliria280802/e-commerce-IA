import { PythonBridge } from '@/sklearn/types';
/**
  Uniform interface for fast distance metric functions.

  The `DistanceMetric` class provides a convenient way to compute pairwise distances between samples. It supports various distance metrics, such as Euclidean distance, Manhattan distance, and more.

  The `pairwise` method can be used to compute pairwise distances between samples in the input arrays. It returns a distance matrix representing the distances between all pairs of samples.

  The [`get\_metric`](#sklearn.metrics.DistanceMetric.get_metric "sklearn.metrics.DistanceMetric.get_metric") method allows you to retrieve a specific metric using its string identifier.

  Examples

  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.DistanceMetric.html)
 */
export declare class DistanceMetric {
    id: string;
    opts: any;
    _py: PythonBridge;
    _isInitialized: boolean;
    _isDisposed: boolean;
    constructor(opts?: {
        /**
          The string identifier or class name of the desired distance metric. See the documentation of the `DistanceMetric` class for a list of available metrics.
         */
        metric?: string;
        /**
          The data type of the input on which the metric will be applied. This affects the precision of the computed distances. By default, it is set to `np.float64`.
         */
        dtype?: any;
        /**
          Additional keyword arguments that will be passed to the requested metric. These arguments can be used to customize the behavior of the specific metric.
         */
        kwargs?: any;
    });
    get py(): PythonBridge;
    set py(pythonBridge: PythonBridge);
    /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
    init(py: PythonBridge): Promise<void>;
    /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
    dispose(): Promise<void>;
    /**
      Get the given distance metric from the string identifier.
  
      See the docstring of DistanceMetric for a list of available metrics.
     */
    get_metric(opts: {
        /**
          The string identifier or class name of the desired distance metric. See the documentation of the `DistanceMetric` class for a list of available metrics.
         */
        metric?: string;
        /**
          The data type of the input on which the metric will be applied. This affects the precision of the computed distances. By default, it is set to `np.float64`.
         */
        dtype?: any;
        /**
          Additional keyword arguments that will be passed to the requested metric. These arguments can be used to customize the behavior of the specific metric.
         */
        kwargs?: any;
    }): Promise<any>;
    /**
      An instance of the requested distance metric class.
     */
    get metric_obj(): Promise<any>;
}
//# sourceMappingURL=DistanceMetric.d.ts.map